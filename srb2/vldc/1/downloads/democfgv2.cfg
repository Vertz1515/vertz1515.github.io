/*********************************************************\
(Version 0.02)
This is a modification of the 2.2 CFG for Zone Builder, specifically based around Demo 4.
but theoretically functional for all Demos.

YOU ARE USING A BETA VERSION OF THIS CONFIGURATION, SOME STUFF IS UNFINISHED!
VISIT: https://vertz1515.com/srb2
\*********************************************************/

// This is required to prevent accidental use of a different configuration
type = "Doom Builder 2 Game Configuration";

// This is the title to show for this game
game = "Sonic Robo Blast 2 - Demo 4"; // This beautiful thing.

//GZDB specific. Don't try to load lumps that don't exist.
basegame = 0;

// This is the simplified game engine/sourceport name
engine = "zdoom"; // Close enough ¯\(°_o)/¯

// When this is set to true, sectors with the same tag will light up when a line is highlighted
linetagindicatesectors = true;

// The format interface handles the map data format - DoomMapSetIO for SRB2DB2, SRB2MapSetIO for Zone Builder
formatinterface = "SRB2MapSetIO"; // THIS FIXED THE FLIPPING ISSUE! WOOHOO!

//Sky textures for vanilla maps
defaultskytextures
{
	RSKY1 = "MAP01";
	RSKY2 = "MAP02";
	RSKY3 = "MAP03";
	RSKY4 = "MAP04";
	RSKY5 = "MAP05";
	RSKY6 = "MAP06";
	RSKY7 = "MAP07";
	RSKY8 = "MAP08";
	RSKY9 = "MAP09";
	RSKY10 = "MAP10";
	RSKY11 = "MAP11";
	RSKY12 = "MAP12";
	RSKY13 = "MAP13";
	RSKY14 = "MAP14";
	RSKY15 = "MAP15";
	RSKY16 = "MAP16";
	RSKY17 = "MAP17";
	RSKY18 = "MAP18";
	RSKY19 = "MAP19";
	RSKY20 = "MAP20";
	RSKY21 = "MAP21";
	RSKY22 = "MAP22";
	RSKY23 = "MAP23";
	RSKY24 = "MAP24";
	RSKY25 = "MAP25,MAP26,MAP27";
	RSKY28 = "MAP28";
	RSKY29 = "MAP29";
	RSKY30 = "MAP30";
	RSKY31 = "MAP31";
	RSKY32 = "MAP32";
}

// Default lump name for new map
defaultlumpname = "MAP01";

// Default testing parameters
testparameters = "-file \"%AP\" \"%F\" -warp %L";
testshortpaths = true;

// Default nodebuilder configurations
defaultsavecompiler = "zennode_normal";
defaulttestcompiler = "zennode_fast";

// Skill levels
skills
{
	1 = "Normal";
}

// Skins
skins
{
	Sonic;
	Tails;
	Knuckles;
}

// Gametypes
gametypes
{
	-1 = "Single Player";
	0 = "Co-op";
	1 = "Match";
	2 = "Team Match";
	3 = "Race";
	4 = "Time Only Race";
	5 = "Tag";
	6 = "Capture The Flag";
}

// Special linedefs
soundlinedefflag = 64;	// See linedefflags
singlesidedflag = 1;	// See linedefflags
doublesidedflag = 4;	// See linedefflags
impassableflag = 1;
upperunpeggedflag = 8;
lowerunpeggedflag = 16;
repeatmidtextureflag = 1024;
pegmidtextureflag = 256;

// Generalized actions
generalizedlinedefs = false;
generalizedsectors = true;

// Texture loading options
defaultwalltexture = "HPZWALL1";
defaultfloortexture = "FLOOR5_1";
defaultceilingtexture = "F_SKY1";
mixtexturesflats = false;
defaulttexturescale = 1.0f;
defaultflatscale = 1.0f;

// Thing number for start position in 3D Mode
start3dmode = 3328;




/*
TEXTURES AND FLAT SOURCES
This tells Doom Builder where to find the information for textures
and flats in the IWAD file, Addition WAD file and Map WAD file.

Start and end lumps must be given in a structure (of which the
key name doesnt matter) and any textures or flats in between them
are loaded in either the textures category or flats category.

For textures: PNAMES, TEXTURE1 and TEXTURE2 are loaded by default.
Kalaron: and now TX_START
*/

// Texture sources
textures
{
	zdoom1
	{
		start = "TX_START";
		end = "TX_END";
	}
}

// Patch sources
patches
{
	standard1
	{
		start = "P_START";
		end = "P_END";
	}

	standard2
	{
		start = "PP_START";
		end = "PP_END";
	}
}

// Sprite sources
sprites
{
	standard1
	{
		start = "S_START";
		end = "S_END";
	}

	standard2
	{
		start = "SS_START";
		end = "SS_END";
	}
}

// Flat sources
flats
{
	standard1
	{
		start = "F_START";
		end = "F_END";
	}

	standard2
	{
		start = "FF_START";
		end = "FF_END";
	}

	standard3
	{
		start = "FF_START";
		end = "F_END";
	}

	standard4
	{
		start = "F_START";
		end = "FF_END";
	}
}


/*
GAME DETECT PATTERN
Used to guess the game for which a WAD file is made.

1 = One of these lumps must exist
2 = None of these lumps must exist
3 = All of these lumps must exist
*/

gamedetect
{
	EXTENDED = 2;


	BEHAVIOR = 2;

	E#M# = 2;

	MAP?? = 1;
}


/*
MAP LUMP NAMES
Map lumps are loaded with the map as long as they are right after each other. When the editor
meets a lump which is not defined in this list it will ignore the map if not satisfied.
The order of items defines the order in which lumps will be written to WAD file on save.
To indicate the map header lump, use ~MAP

Legenda:
required = Lump is required to exist.
blindcopy = Lump will be copied along with the map blindly. (usefull for lumps Doom Builder doesn't use)
nodebuild = The nodebuilder generates this lump.
allowempty = The nodebuilder is allowed to leave this lump empty.
script = This lump is a text-based script. Specify the filename of the script configuration to use.
*/

maplumpnames
{
	~MAP
	{
		required = true;
		blindcopy = true;
		nodebuild = false;
	}

	THINGS
	{
		required = true;
		nodebuild = true;
		allowempty = true;
	}

	LINEDEFS
	{
		required = true;
		nodebuild = true;
		allowempty = false;
	}

	SIDEDEFS
	{
		required = true;
		nodebuild = true;
		allowempty = false;
	}

	VERTEXES
	{
		required = true;
		nodebuild = true;
		allowempty = false;
	}

	SEGS
	{
		required = false;
		nodebuild = true;
		allowempty = false;
	}

	SSECTORS
	{
		required = false;
		nodebuild = true;
		allowempty = false;
	}

	NODES
	{
		required = false;
		nodebuild = true;
		allowempty = false;
	}

	SECTORS
	{
		required = true;
		nodebuild = true;
		allowempty = false;
	}

	REJECT
	{
		required = false;
		nodebuild = true;
		allowempty = false;
	}

	BLOCKMAP
	{
		required = false;
		nodebuild = true;
		allowempty = true;
	}
}

scriptlumpnames
{
	MAINCFG
	{
		script = "SOC.cfg";
	}

	OBJCTCFG
	{
		script = "SOC.cfg";
	}

	SOC_
	{
		script = "SOC.cfg";
		isprefix = true;
	}

	LUA_
	{
		script = "Lua.cfg";
		isprefix = true;
	}
}

// DEFAULT SECTOR BRIGHTNESS LEVELS
sectorbrightness
{
	255;
	248;
	240;
	232;
	224;
	216;
	208;
	200;
	192;
	184;
	176;
	168;
	160;
	152;
	144;
	136;
	128;
	120;
	112;
	104;
	96;
	88;
	80;
	72;
	64;
	56;
	48;
	40;
	32;
	24;
	16;
	8;
	0;
}

// SECTOR TYPES-----------------------------------------------------------------
sectortypes
{
	0 = "Normal";
	1 = "Flashing Light";
	2 = "Weird Water Sector";
	3 = "Death Pit";
	4 = "Damage";
	5 = "Death Pit (No Camera Mod)";
	6 = "Space Countdown";
	7 = "Damage (Fire)";
	8 = "Light Pulse Smoothly";
	9 = "Special Stage Damage";
	10 = "Instant Kill";
	11 = "Damage (Plain)";
	12 = "Light Blink Every Half Second Synch";
	13 = "Light Blink Every Second Synch";
	14 = "Bouncy FOF";
	16 = "Death Pit (Camera Modification)";
	17 = "Light Flicker";
	18 = "Damage (Electric)";
	33 = "Special Stage Goal";
	256 = "Ice/Sludge";
	512 = "Wind/Current";
	519 = "Damage (Fire) and Current";
	666 = "Egg Trap Capsule";
	690 = "Button for Door 700";
	691 = "Button for Door 702";
	692 = "Button for Door 704";
	693 = "Button for Door 706";
	694 = "Button for Door 708";
	695 = "Button for Door 710";
	696 = "Button for Door 712";
	697 = "Button for Door 714";
	698 = "Button for Door 716";
	699 = "Button for Door 718";
	700 = "Button for Door 720";
	701 = "Button for Door 722";
	702 = "Button for Door 724";
	703 = "Button for Door 726";
	704 = "Button for Door 728";
	705 = "Button for Door 730";
	706 = "Button for Door 732";
	707 = "Button for Door 734";
	708 = "Button for Door 736";
	709 = "Button for Door 738";
	710 = "Button 21 (THZ2)";
	711 = "Button for Door 743 (Fast)";
	768 = "Ice/Sludge and Wind/Current";
	967 = "Trigger Linedef Executor (Emerald Check)";
	968 = "Trigger Linedef Executor (NiGHTS mare)";
	969 = "Super Sonic Transform";
	970 = "Check for pushable specials on FOFs";
	971 = "Trigger Linedef Executor (Pushable Objects)";
	972 = "Trigger Linedef Executor (Anywhere in Sector, All Players)";
	973 = "Trigger Linedef Executor (Floor touch, All players)";
	974 = "Trigger Linedef Executor (Anywhere in Sector)";
	975 = "Trigger Linedef Executor (Touch Sector Floor)";
	976 = "Speed Pad (No Spin)";
	977 = "Speed Pad (Spin)";
	978 = "Ring Drainer (Floor touch)";
	979 = "Spinner";
	980 = "Ring Drainer (No Floor Touch)";
	981 = "Raise Ceiling to Highest";
	982 = "Exit Sector";
	983 = "Damage (Water)";
	984 = "Damage (Water) with Current";
	985 = "Conveyor Belt";
	986 = "THZ2 Slime Raise";
	987 = "No Tag Zone";
	988 = "CTF Red Team Base";
	989 = "CTF Blue Team Base";
	990 = "Special Stage Time";
	991 = "Custom Gravity";
	992 = "Ramp Sector";
	993 = "Starpost Activator";
	994 = "Circuit: Finish Line";
	995 = "Return Dropped Flag";
	996 = "Non-Ramp Sector";
	997 = "Fan Sector";
	998 = "Zoom Tube Start";
	999 = "Zoom Tube End";
	1500 ="Bustable Block Sprite parameter(ROIA)";
	1501 ="Bustable Block Sprite parameter(ROIB)";
	1502 ="Bustable Block Sprite parameter(ROIC)";
	1503 ="Bustable Block Sprite parameter(ROID)";
	1504 ="Bustable Block Sprite parameter(ROIE)";
	1505 ="Bustable Block Sprite parameter(ROIF)";
	1506 ="Bustable Block Sprite parameter(ROIG)";
	1507 ="Bustable Block Sprite parameter(ROIH)";
	1508 ="Bustable Block Sprite parameter(ROII)";
	1509 ="Bustable Block Sprite parameter(ROIJ)";
	1510 ="Bustable Block Sprite parameter(ROIK)";
	1511 ="Bustable Block Sprite parameter(ROIL)";
	1512 ="Bustable Block Sprite parameter(ROIM)";
	1513 ="Bustable Block Sprite parameter(ROIN)";
	1514 ="Bustable Block Sprite parameter(ROIO)";
	1515 ="Bustable Block Sprite parameter(ROIP)";
}


// GENERALISED SECTOR TYPES-----------------------------------------------------------------
gen_sectortypes
{
	first
	{
		0 = "Normal";
		1 = "Damage";
		2 = "Damage (Water)";
		3 = "Damage (Fire)";
		4 = "Damage (Electrical)";
		5 = "Spikes";
		6 = "Death Pit (Camera Tilt)";
		7 = "Death Pit (No Camera Tilt)";
		8 = "Instant Kill";
		9 = "Ring Drainer (Floor Touch)";
		10 = "Ring Drainer (Anywhere in Sector)";
		11 = "Special Stage Damage";
		12 = "Space Countdown";
		13 = "Ramp Sector (double step-up/down)";
		14 = "Non-Ramp Sector (no step-down)";
		15 = "Bouncy FOF";
	}

	second
	{
		0 = "Normal";
		16 = "Trigger Line Ex. (Pushable Objects)";
		32 = "Trigger Line Ex. (Anywhere, All Players)";
		48 = "Trigger Line Ex. (Floor Touch, All Players)";
		64 = "Trigger Line Ex. (Anywhere in Sector)";
		80 = "Trigger Line Ex. (Floor Touch)";
		96 = "Trigger Line Ex. (Emerald Check)";
		112 = "Trigger Line Ex. (NiGHTS Mare)";
		128 = "Check for Linedef Executor on FOFs";
		144 = "Egg Capsule";
		160 = "Special Stage Time/Spheres Parameters";
		176 = "Custom Global Gravity";
	}

	third
	{
		0 = "Normal";
		512 = "Wind/Current";
		1024 = "Conveyor Belt";
		1280 = "Speed Pad";
	}

	fourth
	{
		0 = "Normal";
		4096 = "Star Post Activator";
		8192 = "Exit/Special Stage Pit/Return Flag";
		12288 = "CTF Red Team Base";
		16384 = "CTF Blue Team Base";
		20480 = "Fan Sector";
		24576 = "Super Sonic Transform";
		28672 = "Force Spin";
		32768 = "Zoom Tube Start";
		36864 = "Zoom Tube End";
		40960 = "Circuit Finish Line";
		45056 = "Rope Hang";
		49152 = "Intangible to the Camera";
	}
}

// LINEDEF FLAGS
linedefflags
{
	1 = "[0] Impassable";
	2 = "[1] Block Enemies";
	4 = "[2] Double-Sided";
	8 = "[3] Upper Unpegged";
	16 = "[4] Lower Unpegged";
	32 = "[5] Slope Skew (E1)";
	64 = "[6] Not Climbable";
	128 = "[7] No Midtexture Skew (E2)";
	256 = "[8] Peg Midtexture (E3)";
	512 = "[9] Solid Midtexture (E4)";
	1024 = "[10] Repeat Midtexture (E5)";
	2048 = "[11] Netgame Only";
	4096 = "[12] No Netgame";
	8192 = "[13] Effect 6";
	16384 = "[14] Bouncy Wall";
	32768 = "[15] Transfer Line";
}

// Linedef flags UDMF translation table
// This is needed for copy/paste and prefabs to work properly
// When the UDMF field name is prefixed with ! it is inverted
linedefflagstranslation
{
	1 = "blocking";
	2 = "blockmonsters";
	4 = "twosided";
	8 = "dontpegtop";
	16 = "dontpegbottom";
	32 = "secret";
	64 = "blocksound";
	128 = "dontdraw";
	256 = "mapped";
}

// LINEDEF ACTIVATIONS
linedefactivations
{
}

// LINEDEF TYPES
linedeftypes
{
	misc
	{
		title = "Miscellaneous";

		0
		{
			title = "None";
			prefix = "(0)";
		}
			52
		{
			title = "End Zone Instantly";
			prefix = "(52)";
		}
	//		97
	//	{
	//		title = "Teleport To Tagged Sector";
	//		prefix = "(213)";
	//	}
			213
		{
			title = "Shadow Mapper";
			prefix = "(213)";
		}
			232
		{
			title = "Move Floor/Celing of a Tagged Sector (Floating Platform)";
			prefix = "(232)";
		}
			242
		{
			title = "Fake Plane (Pre-Demo Water)";
			prefix = "(242)";
			3dfloor = true;
			3dfloorflags = "F31";
			flags643dfloorflagsadd = "20000";
			flags5123dfloorflagsadd = "80000000";
			flags10243dfloorflagsadd = "40000000";
		}
			270
		{
			title = "Water Opaque";
			prefix = "(270)";
			3dfloor = true;
			3dfloorflags = "F31";
			flags643dfloorflagsadd = "20000";
			flags5123dfloorflagsadd = "80000000";
			flags10243dfloorflagsadd = "40000000";
		}
			281
		{
			title = "Solid Opaque";
			prefix = "(281)";
			3dfloor = true;
			3dfloorflags = "19F";
		}		
			282
		{
			title = "Lower Floor on Level Load";
			prefix = "(282)";
		}
			300
		{
			title = "Solid, Translucent";
			prefix = "(300)";
			3dfloor = true;
			3dfloorflags = "195F";
			flags643dfloorflagsadd = "7C80";
		}		
	}

}


// THING FLAGS
thingflags
{
	1 = "Easy";
//	2 = "Medium";
	4 = "Hard";
	8 = "Deaf";
	16 = "Multiplayer";
}

// Thing flags UDMF translation table
// This is needed for copy/paste and prefabs to work properly
// When the UDMF field name is prefixed with ! it is inverted
thingflagstranslation
{
	1 = "skill1";
	2 = "skill2";
	4 = "skill3";
	8 = "ambush";
	32 = "!dm";
	64 = "!coop";
}

// THING FLAGS ERROR MASK
// Mask for the thing flags which indicates the options
// that make the same thing appear in the same modes
thingflagsmask1 = 7;	// 1 + 2 + 4
thingflagsmask2 = 0;


// THING TYPES------------------------------------------------------------------
// Color values: 1-Dark_Blue 2-Dark_Green 3-Turqoise 4-Dark_Red 5-Purple 6-Brown 7-Gray
// 8-Dark_Gray 9-Blue 10-Green 11-Cyan 12-Red 13-Magenta
// 14-Yellow 15-White 16-Pink 17-Orange 18-Gold 19-Cream
thingtypes
{
players
{
	color = 10;	// Light Green
	arrow = 1;
	title = "Player Starts";
	width = 16;
	sort = 1;
	height = 56;
	hangs = 0;
	blocking = 1;
	error = 2;
	
	1
	{
		title = "Player 1 start";
		sprite = "PLAYA2A8";
		class = "$Player1Start";
	}
	
	2
	{
		title = "Player 2 start";
		sprite = "PLAYA2A8";
		class = "$Player2Start";
	}
	
	3
	{
		title = "Player 3 start";
		sprite = "PLAYA2A8";
		class = "$Player3Start";
	}
	
	4
	{
		title = "Player 4 start";
		sprite = "PLAYA2A8";
		class = "$Player4Start";
	}
	4001
	{
		title = "Player 5 start";
		sprite = "PLAYA2A8";
		class = "$Player1Start";
	}
	
	4002
	{
		title = "Player 6 start";
		sprite = "PLAYA2A8";
		class = "$Player2Start";
	}
	
	4003
	{
		title = "Player 7 start";
		sprite = "PLAYA2A8";
		class = "$Player3Start";
	}
	
	4004
	{
		title = "Player 8 start";
		sprite = "PLAYA2A8";
		class = "$Player4Start";
	}
	
	11
	{
		title = "Player Deathmatch start";
		sprite = "PLAYF1";
		class = "$DeathmatchStart";
	}
}


teleports
{
	color = 2;	// Green
	arrow = 1;
	title = "Teleports";
	width = 16;
	sort = 1;
	height = 56;
	hangs = 0;
	blocking = 0;
	error = 0;
	
	14
	{
		title = "Teleport Destination";
		sprite = "TFOGB0";
		class = "TeleportDest";
	}
}

badniks
{
	color = 12;	// Light Red
	arrow = 1;
	title = "Enemies";
	width = 20;
	sort = 1;
	height = 56;
	hangs = 0;
	blocking = 1;
	error = 2;
	
	3004
	{
		title = "Blue Crawla";
		sprite = "POSSA2A8";
		class = "ZombieMan";
	}
	
	9
	{
		title = "Red Crawla";
		sprite = "SPOSA2A8";
		class = "ShotgunGuy";
	}
		
	58
	{
		title = "Fish";
		renderstyle = "translucent";
		alpha = 0.25f;
		width = 30;
		sprite = "FISHA0";
		class = "Spectre";
	}
	22
	{
		title = "Really Annoying Jetty-Syn";
		width = 31;
		sprite = "JETGA1";
		class = "Cacodemon";
	}	
	3005
	{
		title = "Jetty-Syn";
		width = 31;
		sprite = "JETBA1";
		class = "Cacodemon";
	}	
	16
	{
		title = "Eggmobile";
		width = 40;
		sprite = "EGGMA1";
		height = 110;
		class = "Cyberdemon";
	}
	7
	{
		title = "RedXVI";
		width = 128;
		sprite = "REDXA1";
		height = 100;
		class = "SpiderMastermind";
	}
}
health
{
	color = 1;	// Blue
	arrow = 0;
	title = "Monitors";
	width = 20;
	sort = 1;
	height = 16;
	hangs = 0;
	blocking = 0;
	
	2011
	{
		title = "10 Ring Monitor";
		sprite = "STIMB0";
		class = "Stimpack";
	}
	
	2012
	{
		title = "25 Ring Monitor";
		sprite = "MEDIB0";
		height = 25;
		class = "Medikit";
	}	
	35
	{
		title = "Blue Shield";
		sprite = "BLTVB0";
		class = "Candelabra";
	}
	2028
	{
		title = "Green Shield";
		sprite = "GRTVB0";
		class = "Column";
	}
	48
	{
		title = "Yellow Shield";
		sprite = "YLTVB0";
		class = "TechPillar";
	}
	2018
	{
		title = "Black Shield";
		sprite = "BKTVB0";
		class = "GreenArmor";
	}
	41
	{
		title = "Extra Life Monitor";
		sprite = "PRUPB0";
		class = "EvilEye";
	}
	25
	{
		title = "Speed Shoes Monitor";
		sprite = "SHTVB0";
		width = 16;
		blocking = 1;
		error = 2;
		class = "DeadStick";
	}
	2022
	{
		title = "Invincibility Monitor";
		sprite = "PINVB0";
		height = 30;
		class = "InvulnerabilitySphere";
	}
}

powerups
{
	color = 9;	// Light Blue
	arrow = 0;
	title = "Colectibles";
	width = 20;
	sort = 1;
	height = 16;
	hangs = 0;
	blocking = 0;
	
		
	2014
	{
		title = "Ring";
		sprite = "BON1A0";
		class = "HealthBonus";
	}
	44
	{
		title = "5 Vertical Rings";
		sprite = "BON1A0";
		class = "BlueTorch";
	}
	2013
	{
		title = "Emerald Token";
		sprite = "SOULA0";
		height = 45;
		class = "Soulsphere";
	}
	3002
	{
		title = "Emerald #1 (Emerald Hunt)";
		width = 30;
		sprite = "EMMYA0";
		class = "Demon";
	}
	3001
	{
		title = "Emerald #2 (Emerald Hunt)";
		sprite = "EMMYA0";
		class = "DoomImp";
	}
}
obstacles
{
	color = 3;	// Cyan
	arrow = 0;
	title = "Scenery";
	width = 16;
	sort = 1;
	height = 20;
	hangs = 0;
	blocking = 1;
	error = 2;
	
	12
	{
		title = "Dead Player";
		sprite = "PLAY]4]6";
		class = "GibbedMarineExtra";
	}
	10
	{
		title = "Dead Player";
		sprite = "PLAY]4]6";
		class = "GibbedMarine";
	}
	15
	{
		title = "Dead Player";
		sprite = "PLAY]4]6";
		class = "DeadMarine";
	}
	36
	{
		title = "Greenflower Zone Flower";
		sprite = "COL5A0";
		class = "HeartColumn";
	}	
	2035
	{
		title = "Techno Hill Flower";
		width = 10;
		sprite = "THZPB0";
		height = 32;
		class = "ExplosiveBarrel";
	}
		
	27
	{
		title = "Waterfall Sound Effect #2";
		sprite = "BOSFA0";
		width = 16;
		blocking = 1;
		error = 2;
		class = "HeadOnAStick";
	}
	2019
	{
		title = "Waterfall Sound Effect #2";
		sprite = "BOSFA0";
		class = "BlueArmor";
	}
	2023
	{
		title = "Water Sound Effect #1";
		sprite = "BOSFA0";
		class = "Berserk";
	}
	
	2024
	{
		title = "Waterfall Sound Effect #3";
		sprite = "BOSFA0";
		height = 45;
		class = "BlurSphere";
	}
	
	2025
	{
		title = "Waterfall Sound Effect #4";
		sprite = "BOSFA0";
		height = 60;
		class = "RadSuit";
	}
	
	2026
	{
		title = "Waterfall Sound Effect #5";
		sprite = "BOSFA0";
		height = 35;
		class = "Allmap";
	}
	2045
	{
		title = "Water Sound Effect #2";
		sprite = "BOSFA0";
		class = "Infrared";
	}

}

lights
{
	color = 11;	// Light Cyan
	arrow = 0;
	title = "Gameplay Elements";
	width = 16;
	sort = 1;
	height = 16;
	hangs = 0;
	blocking = 1;
	error = 2;
	
	86
	{
		title = "Signpost";
		sprite = "SIGNA0";
		height = 68;
		width = 16;
		hangs = 1;
		blocking = 1;
		error = 2;
		class = "BloodyTwitch";
	}
	34
	{
		title = "Blue Flag";
		sprite = "BFLGA0";
		width = 20;
		blocking = 0;
		error = 1;
		class = "Candlestick";
	}
	31
	{
		title = "Red Flag";
		sprite = "RFLGA0";
		width = 20;
		blocking = 0;
		error = 1;
		class = "Candlestick";
	}
	28
	{
		title = "Yellow Spring";
		sprite = "POL2A0";
		width = 16;
		blocking = 1;
		error = 2;
		class = "HeadsOnAStick";
	}
	79
	{
		title = "Red Spring";
		sprite = "POB1A0";
		width = 16;
		blocking = 1;
		error = 2;
		class = "HeadsOnAStick";
	}
	2015
	{
		title = "Yellow Diagonal Spring";
		sprite = "YSPRA8";
		class = "ArmorBonus";
	}
	32
	{
		title = "Fan";
		sprite = "COL3A0";
		class = "TallRedColumn";
	}
	33
	{
		title = "Bubble Spawner";
		sprite = "COL4A0";
		class = "ShortRedColumn";
	}
	30
	{
		title = "Pipe Wind";
		sprite = "STEMD0";
		class = "TallGreenColumn";
	}
		30
	{
		title = "Boost Player Towards Angle Direction";
		sprite = "STEMD0";
		class = "TallGreenColumn";
	}
}

decoration
{
	color = 4;	// Red
	arrow = 0;
	title = "Leftovers";
	width = 20;
	sort = 1;
	height = 16;
	hangs = 0;
	blocking = 0;
	
	26
	{
		title = "SRB2Xmas Christmas Tree";
		sprite = "POL6A0";
		width = 16;
		blocking = 1;
		error = 2;
		class = "LiveStick";
	}
		45
	{
		title = "Strange Object (Tall green firestick)";
		sprite = "TGRNA0";
		class = "GreenTorch";
	}
	
	46
	{
		title = "Strange Object (Tall red firestick)";
		sprite = "TREDA0";
		class = "RedTorch";
	}
	
	55
	{
		title = "Strange Object (Short blue firestick)";
		sprite = "SMBTA0";
		class = "ShortBlueTorch";
	}
	57
	{
		title = "Strange Object (Short red firestick)";
		sprite = "SMRTA0";
		class = "ShortRedTorch";
	}
	29
	{
		title = "Strange Object (Pile of skulls and candles)";
		sprite = "POL3A0";
		width = 16;
		blocking = 1;
		error = 2;
		class = "HeadCandles";
	}
	47
	{
		title = "Strange Object (Formerly Stalagtite)";
		sprite = "SMITA0";
		class = "Stalagtite";
	}
	42
	{
		title = "Strange Object";
		sprite = "FSKUA0";
		class = "FloatingSkull";
	}
}


//Default things filters
thingsfilters
{

	filter0
	{
		name = "Player starts";
		category = "starts";
		type = -1;
	}


	filter1
	{
		name = "Enemies";
		category = "enemies";
		type = -1;

	}


	filter2
	{
		name = "NiGHTS Track";
		category = "nightstrk";
		type = -1;

	}
}
